@model Pool.WebApp.Models.ConfigData
@{
    ViewData["Title"] = "Config Page";
}
<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css"
          rel="stylesheet"
          integrity="sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x"
          crossorigin="anonymous" />
    <link rel="stylesheet" href="~/css/config.css" />
    <title>Config</title>
</head>
<body>
    <nav>
        <div class="logo">
            <div class="logo_insert"></div>
        </div>

        <div class="items_menu">
            <a asp-area="" asp-controller="Home" asp-action="Index">Inicio</a>
            <a asp-area="" asp-controller="Config" asp-action="Index" class="active">Configuración</a>
            <a asp-area="" asp-controller="Table" asp-action="Index">Registro</a>
        </div>

        <div class="cont_btn">
            <button>@Html.ActionLink("Salir", "Salir", "Config", "", new { @class = "text-white text-decoration-none" }) <i class="fas fa-sign-out-alt"></i></button>
        </div>
    </nav>

    <div class="contenedor">
        @{
            if (!ViewBag.ExistsData)
            {
                <div class="container">
                    <div class="row">
                        <div class="col-7 mx-auto mt-5 text-white text-center">
                            <p class="display-4 fw-bold">No hay una piscina registrada</p>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <h2 class="title_con">Formulario de configuracion</h2>
                @using (Html.BeginForm("Guardar", "Config", FormMethod.Post))
                {

                    <label for="" class="subtitle_config">Tipo de dato</label>
                    <p class="m-0">Usted selecciono: @ViewBag.Grados</p>
                    <div class="input">
                        <div class="icono"><i class="fas fa-temperature-low"></i></div>
                        @{
                            List<SelectListItem> listItems = new List<SelectListItem>();
                            listItems.Add(new SelectListItem
                            {
                                Text = "Celsius",
                                Value = "c",
                                Selected = true
                            });
                            listItems.Add(new SelectListItem
                            {
                                Text = "Fahrenheit",
                                Value = "f",

                            });
                            listItems.Add(new SelectListItem
                            {
                                Text = "Kelvin",
                                Value = "k"
                            });
                        }

                        @Html.DropDownListFor(model => model.Grados, listItems, "-- Select Status --", new { @class = "select" });
                    </div>

                    <label for="" class="subtitle_config">Temperatura</label>

                    <p class="m-0">Usted selecciono: @ViewBag.Temp_min</p>
                    <div class="input">
                        <div class="icono"><i class="fas fa-thermometer-quarter"></i></div>
                        @Html.TextBoxFor(d => d.Temp_min, "", new { @class = "inputitem", @type = "number", @placeholder = "Temperatura minima", @value = ViewBag.Temp_min })
                    </div>
                    <p class="m-0">Usted selecciono: @ViewBag.Temp_min</p>
                    <div class="input">
                        <div class="icono"><i class="fas fa-thermometer-three-quarters"></i></div>
                        @Html.TextBoxFor(d => d.Temp_max, "", new { @class = "inputitem", @type = "number", @placeholder = "Temperatura maxima" })
                    </div>




                    <label for="" class="subtitle_config">pH</label>
                    <p class="m-0">Usted selecciono: @ViewBag.Ph_min</p>
                    <div class="input">
                        <div class="icono"><i class="fas fa-tint"></i></div>
                        @Html.TextBoxFor(d => d.Ph_min, "", new { @class = "inputitem", @type = "number", @placeholder = "pH minimo" })
                    </div>
                    <p class="m-0">Usted selecciono: @ViewBag.Ph_max</p>
                    <div class="input">
                        <div class="icono"><i class="fas fa-tint"></i></div>
                        @Html.TextBoxFor(d => d.Ph_max, "", new { @class = "inputitem", @type = "number", @placeholder = "pH minimo" })
                    </div>


                    <label for="" class="subtitle_config">Datos de la piscina</label>

                    <p class="m-0">Usted selecciono: @ViewBag.PoolName</p>
                    <div class="input">
                        <div class="icono"><i class="fas fa-swimming-pool"></i></div>
                        @Html.TextBoxFor(d => d.Name_Pool, "", new { @class = "inputitem", @type = "text", @placeholder = "Nombre de la piscina" })
                    </div>

                    <p class="m-0">Usted selecciono: @ViewBag.Location</p>
                    <div class="input">
                        <div class="icono"><i class="fas fa-map-marker-alt"></i></div>
                        @Html.TextBoxFor(d => d.Location, "", new { @class = "inputitem", @type = "text", @placeholder = "Locación de la piscina" })
                    </div>


                    <button class="btn_Save">Guardar configuracion <i class="fas fa-save"></i></button>

                }
            }
        }



    </div>

    <div class="area">
        <ul class="circles">
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
        </ul>
    </div>
    <script src="https://kit.fontawesome.com/5fa83d646f.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.18/dist/sweetalert2.all.min.js"></script>
    <script>

        document.addEventListener('DOMContentLoaded', () => {

           

           @*let error = Number('@ViewBag.Error');

            let icon = "";
            let msg = "";

            if (error == 0) {
                icon = "success";
                msg = "Datos actualizados"
                alerta(icon, msg);

            } else {
                icon = "error";
                msg = "Error al actualizar datos"
                alerta(icon, msg);
            }

        })


        const alerta = (icon, title) => {
            const Toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer)
                    toast.addEventListener('mouseleave', Swal.resumeTimer)
                }
            })

            Toast.fire({
                icon,
                title
            })*@
        }
    </script>
</body>