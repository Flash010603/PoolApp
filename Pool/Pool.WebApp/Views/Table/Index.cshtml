@{
    ViewData["Title"] = "Home Page";
}
<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css"
          rel="stylesheet"
          integrity="sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x"
          crossorigin="anonymous" />
    <link rel="stylesheet" href="~/css/table.css" />
    <title>Table</title>
</head>
<body>
    <nav>
        <div class="logo">
            <div class="logo_insert"></div>
        </div>

        <div class="items_menu">
            <a asp-area="" asp-controller="Home" asp-action="Index">Inicio</a>
            <a asp-area="" asp-controller="Config" asp-action="Index" >Configuración</a>
            <a asp-area="" asp-controller="Table" asp-action="Index" class="active">Registro</a>
        </div>

        <div class="cont_btn">
            <button>@Html.ActionLink("Salir", "Salir", "Table", "", new { @class = "text-white text-decoration-none" }) <i class="fas fa-sign-out-alt"></i></button>
        </div>
    </nav>

    <div class="container">
        <div class="row mb-5">
            <div class="col text-white">
                <h2 class="text-center my-5">Tabla de registro de informacion</h2>
                <p class="m-0 text-center">
                    Tabla donde se registran los datos de la temperatura y el nivel de pH del agua para mantener un registro cada 24 horas 
                </p>
            </div>
        </div>

        <table class="table table-bordered border-light table-dark table-striped table-responsive align-middle">
            <thead class="text-center">
                <tr class="border-light">
                    <th scope="col" class="text-warning">Fecha</th>
                    <th scope="col" class="text-warning">Temp min.</th>
                    <th scope="col" class="text-warning">Temp max.</th>
                    <th scope="col" class="text-warning">pH min</th>
                    <th scope="col" class="text-warning">pH max</th>
                </tr>
            </thead>
            <tbody class="text-center" id="tbody">
                
            </tbody>
        </table>
    </div>

    <div class="area">
        <ul class="circles">
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
        </ul>
    </div>
    <script src="https://kit.fontawesome.com/5fa83d646f.js"></script>
    <script>

        const tbody = document.getElementById('tbody');

        document.addEventListener("DOMContentLoaded", () => {

            rellenarTabla();
            crearRegistro();
            
        });

        const rellenarTabla = async() => {

            const url = '@ViewBag.UrlTabla';
            
            const res = await fetch(url);
            const data = await res.json();
           
            let html = "";

            for (let i = 0; i<=data.length-1;i++) {
                html += `
                <tr>
                    <td scope="row">${data[i].fecha}</td>
                    <td>${data[i].temp_min_register}</td>
                    <td>${data[i].temp_max_register}</td>
                    <td>${data[i].ph_min_register}</td>
                    <td>${data[i].ph_max_register}</td>
                </tr>
                `;
            }

            tbody.innerHTML = html;
        }

        const crearRegistro = () => {
            const dia = 1000 * 60 * 60 * 24;

            setInterval(async () => {
                 const url = '@ViewBag.UrlPool';
            const res = await fetch(url);
                const data = await res.json();


                 await actualizarData(data);

            }, dia)
        }

        const actualizarData = async (data) => {

            const data_table = {
                ph: data.ph_current,
                temp: data.temp_current
            }

            sessionStorage.setItem("datos_actu", JSON.stringify(data_table));


            const newData = {
                id: data.id,
                name_Pool: data.name_Pool,
                location: data.location,
                temp_min: data.temp_min,
                temp_max: data.temp_max,
                temp_current: data.temp_current,
                ph_min: data.ph_min,
                ph_max: data.ph_max,
                ph_current: data.ph_current,
                grados: data.grados,
                idUser: data.idUser,
            }

            const url = 'https://localhost:5001/Pool';
            const res = await fetch(url, {
                method: "PUT",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(newData)
            });
            const data_nueva = await res.json();
            console.log(data_nueva);
            colocarData(data_nueva.ph_current, data_nueva.temp_current, data_nueva.idUser);
        }

        const colocarData = async(ph_actual, temp_actual, idUser) => {
            const data = JSON.parse(sessionStorage.getItem("datos_actu"));

            let temp_min_register = 0;
            let temp_max_register = 0;
            let ph_min_register = 0;
            let ph_max_register = 0;


            if (data.ph < ph_actual) {
                ph_max_register = ph_actual;
                ph_min_register = data.ph;
            } else {
                ph_max_register = data.ph;
                ph_min_register = ph_actual;
            }

            if (data.temp < temp_actual) {
                temp_max_register = temp_actual;
                temp_min_register = data.temp;
            } else {
                temp_max_register = data.temp;
                temp_min_register = temp_actual;
            }

            const date = new Date();
            const newDatatabla = {
                fecha: `${date.getDay()}-${date.getMonth()+1}-${date.getFullYear()}`,
                temp_min_register,
                temp_max_register,
                ph_min_register,
                ph_max_register,
                idUser,
            }

            

            const url = 'https://localhost:5001/Table';
            const res = await fetch(url, {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(newDatatabla)
            });
            await res.json();

            rellenarTabla();
        }

    </script>
</body>